# config map
apiVersion: v1
kind: ConfigMap
metadata:
  name: lakesoul-basic-config
  namespace: lakesoul-basic-env
data:
  metadata_init.sql: |
    create table if not exists namespace
    (
        namespace  text,
        properties json,
        comment    text,
        domain     text default 'public',
        primary key (namespace)
    );

    insert into namespace(namespace, properties, comment) values ('default', '{}', '')
    ON CONFLICT DO NOTHING;

    create table if not exists table_info
    (
        table_id        text,
        table_namespace text default 'default',
        table_name      text,
        table_path      text,
        table_schema    text,
        properties      json,
        partitions      text,
        domain          text default 'public',
        primary key (table_id)
    );
    CREATE INDEX CONCURRENTLY IF NOT EXISTS table_info_name_index ON table_info (table_namespace, table_name);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS table_info_path_index ON table_info (table_path);

    create table if not exists table_name_id
    (
        table_name      text,
        table_id        text,
        table_namespace text default 'default',
        domain          text default 'public',
        primary key (table_name, table_namespace)
    );
    CREATE INDEX CONCURRENTLY IF NOT EXISTS table_name_id_id_index ON table_name_id (table_id);

    create table if not exists table_path_id
    (
        table_path      text,
        table_id        text,
        table_namespace text default 'default',
        domain          text default 'public',
        primary key (table_path)
    );
    CREATE INDEX CONCURRENTLY IF NOT EXISTS table_path_id_id_index ON table_path_id (table_id);

    DO
    $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'data_file_op') THEN
                create type data_file_op as
                (
                    path            text,
                    file_op         text,
                    size            bigint,
                    file_exist_cols text
                );
            END IF;
        END
    $$;

    create table if not exists data_commit_info
    (
        table_id       text,
        partition_desc text,
        commit_id      UUID,
        file_ops       data_file_op[],
        commit_op      text,
        committed      boolean default 'false',
        timestamp      bigint,
        domain         text default 'public',
        primary key (table_id, partition_desc, commit_id)
    );
    CREATE INDEX CONCURRENTLY IF NOT EXISTS data_commit_info_commit_id ON data_commit_info (commit_id);

    create table if not exists partition_info
    (
        table_id       text,
        partition_desc text,
        version        int,
        commit_op      text,
        timestamp      bigint DEFAULT (date_part('epoch'::text, now()) * (1000)::double precision),
        snapshot       UUID[],
        expression     text,
        domain         text default 'public',
        primary key (table_id, partition_desc, version)
    );
    CREATE INDEX CONCURRENTLY IF NOT EXISTS partition_info_timestamp ON partition_info (timestamp);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS partition_info_desc_gin_tsvector_index ON partition_info USING GIN (to_tsvector('english', partition_desc));

    CREATE OR REPLACE FUNCTION partition_insert() RETURNS TRIGGER AS
    $$
    DECLARE
        rs_version         integer;
        rs_table_path      text;
        rs_table_namespace text;
    BEGIN
        if NEW.commit_op <> 'CompactionCommit' then
            select version
            INTO rs_version
            from partition_info
            where table_id = NEW.table_id
              and partition_desc = NEW.partition_desc
              and version != NEW.version
              and commit_op = 'CompactionCommit'
            order by version desc
            limit 1;
            if rs_version >= 0 then
                if NEW.version - rs_version >= 10 then
                    select table_path, table_namespace
                    into rs_table_path, rs_table_namespace
                    from table_info
                    where table_id = NEW.table_id;
                    perform pg_notify('lakesoul_compaction_notify',
                                      concat('{"table_path":"', rs_table_path, '","table_partition_desc":"',
                                            NEW.partition_desc, '","table_namespace":"', rs_table_namespace, '"}'));
                end if;
            else
                if NEW.version >= 10 then
                    select table_path, table_namespace
                    into rs_table_path, rs_table_namespace
                    from table_info
                    where table_id = NEW.table_id;
                    perform pg_notify('lakesoul_compaction_notify',
                                      concat('{"table_path":"', rs_table_path, '","table_partition_desc":"',
                                            NEW.partition_desc, '","table_namespace":"', rs_table_namespace, '"}'));
                end if;
            end if;
            RETURN NULL;
        end if;
        RETURN NULL;
    END;
    $$ LANGUAGE plpgsql;

    DROP TRIGGER IF EXISTS partition_table_change ON partition_info;
    CREATE TRIGGER partition_table_change
        AFTER INSERT
        ON partition_info
        FOR EACH ROW
    EXECUTE PROCEDURE partition_insert();

    create table if not exists global_config
    (
        key  text,
        value text,
        primary key (key)
    );

    create table if not exists discard_compressed_file_info
    (
        file_path text,
        table_path text,
        partition_desc text,
        timestamp bigint DEFAULT (date_part('epoch'::text, now()) * (1000)::double precision),
        t_date date,
        PRIMARY KEY (file_path)
    );
  LAKESOUL_PG_URL: "??"
  LAKESOUL_PG_USERNAME: "??"
  LAKESOUL_PG_PASSWORD: "??"
  AWS_SECRET_ACCESS_KEY: "??"
  AWS_SECRET_ACCESS_ID: "??"
  AWS_ENDPOINT: "??"
---
# minio-service
apiVersion: v1
kind: Service
metadata:
  name: lakesoul-basic-miosvc
  namespace: lakesoul-basic-env # 修改为你的命名空间
  labels:
    app: lakesoul-basic-miosvc
spec:
  type: ClusterIP
  ports:
    - name: api
      port: 9000          # MinIO API 端口
      targetPort: 9000
      protocol: TCP
    - name: console
      port: 9001          # MinIO 控制台端口
      targetPort: 9001
      protocol: TCP
  selector:
    app: lakesoul-basic-minio            # 匹配 MinIO Deployment 的标签
---
# minio-backend
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: lakesoul-basic-minio
  namespace: lakesoul-basic-env
  labels:
    app: lakesoul-basic-minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lakesoul-basic-minio
  template:
    metadata:
      labels:
        app: lakesoul-basic-minio
    spec:
      containers:
        - name: minio
          image: docker.1ms.run/minio/minio
          ports:
            - containerPort: 9000
            - containerPort: 9001
          args:
          - server
          - /data
          env:
            - name: MINIO_DEFAULT_BUCKETS
              value: "lakesoul-test-bucket:public"
            - name: MINIO_ROOT_USER
              value: "minioadmin1"
            - name: MINIO_ROOT_PASSWORD
              value: "minioadmin1"
---
# pg-service
apiVersion: v1
kind: Service
metadata:
  name: lakesoul-basic-pgsvc
  namespace: lakesoul-basic-env  # 修改为你的命名空间
  labels:
    app: lakesoul-basic-pgsvc
spec:
  type: ClusterIP  # 内部访问（默认）
  ports:
    - name: postgres
      port: 5432           # 服务端口（外部访问）
      targetPort: 5432     # 容器端口
      protocol: TCP
  selector:
    app: lakesoul-basic-pg  # 匹配Deployment的标签
---
# pg-backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lakesoul-basic-pg
  namespace: lakesoul-basic-env
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lakesoul-basic-pg
  template:
    metadata:
      labels:
        app: lakesoul-basic-pg
    spec:
      containers:
      - name: postgres
        image: docker.1ms.run/library/postgres  # 选择合适的版本/cloudnative-pg/postgresql   
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: metadata-init
          mountPath: /docker-entrypoint-initdb.d
        env:
        - name: POSTGRES_USER
          value: "lakesoul_test"  # 数据库用户名
        - name: POSTGRES_PASSWORD
          value: "lakesoul_test"  # 数据库密码（生产环境建议使用Secret）
        - name: POSTGRES_DB
          value: "lakesoul_test"  # 默认数据库名
      volumes:
      - name: metadata-init
        configMap:
          name: lakesoul-basic-config
          defaultMode: 0744
          items:
          - key: metadata_init.sql
            path: metadata_init.sql